import turtle
import random
import sys
from player import *


#부루마블 맵의 도시 정보를 저장하는 리스트, [도시이름, x좌표, y좌표, 구매금액, 지불금액]
city = [['출발', -400, -400, 0, 0], ['타이페이', -300, -400, 5, 6], ['홍콩', -200, -400, 8, 9], ['마닐라', -100, -400, 8, 9], ['제주도', 0, -400, 20, 30],
        ['싱가폴', 100, -400, 10, 11], ['카이로', 200, -400, 10, 11], ['이스탄불', 300, -400, 12, 13],
        ['무인도', 400, -400, 0, 0], ['아테네', 400, -300, 14, 15], ['코펜하겐', 400, -200, 16, 16], ['스톡홀름', 400, -100, 16, 16], ['콩코드여객기', 400, 0, 20, 30], ['취리히', 400, 100, 18, 18],
        ['베를린', 400, 200, 18, 18], ['몬트리올', 400, 300, 20, 20],
        ['사회복지기구', 400, 400, 0, 0],['부에노스아이레스', 300, 400, 22, 22], ['상파울로', 200, 400, 24, 24], ['시드니', 100, 400, 24, 24], ['부산', 0, 400, 40, 50], ['하와이', -100, 400, 26, 26],
        ['리스본', -200, 400, 26, 26], ['마드리드', -300, 400, 28, 28],
        ['우주여행', -400, 400, 0, 0], ['도쿄', -400, 300, 30, 30], ['워싱턴', -400, 200, 35, 35], ['파리', -400, 100, 32, 32],  ['로마', -400, 0, 32, 32], ['런던', -400, -100, 35, 35],
        ['뉴욕', -400, -200, 35, 35], ['서울', -400, -300, 50, 70] ]


#사각형 한개를 그려주는 함수, 매개변수로 사각형의 색을 넘겨받음, default값은 흰색
def rect(color = 'white'):
    t.setheading(0)
    t.fillcolor(color)
    t.begin_fill()
    for i in range(0, 4):
        t.left(90)
        t.fd(100)
    t.end_fill()

#부루마블 맵 전체를 그리는 함수
def map():
    t.up()
    t.goto(-350,-450)

    for i in range(0, 4):
        for j in range(0, 8):
            t.down()
            if j == 0 : # 모서리인 경우(출발, 무인도, 사회복지기구, 우주여행)
                rect('lightgreen') # 연두색 사각형을 그림
            else :
                rect()
            t.up()
            t.setheading(90 * i)            
            t.fd(100)
            
    # 맵 가운데에 게임 설명 출력
    write_letter('터틀', 0, 20, 50)
    write_letter('부루마블', 0, -50, 50)
    write_letter('- 시작금액은 150만원 입니다.', 0, -100, 10)
    write_letter('- 완주 시, 월급 5만원이 지급됩니다.', 0, -115, 10)
    write_letter('- 플레이어 중 한 명이 파산 시, 게임이 종료됩니다.', 0, -130, 10)
    write_letter('- 사회복지기구에 방문하면 사회복지기금 2만원을 지불해야합니다.', 0, -145, 10)
    write_letter('- 우주여행에 방문하면 우주여행을 제외한 원하는 위치로 이동이 가능합니다.', 0, -160, 10)
    write_letter('- 무인도에 방문하면 3턴 동안 탈출할 수 없습니다.(주사위 더블 시 탈출 가능)', 0, -175, 10)
    write_letter('- 상대방의 도시에 방문하면 통행료를 지불해야합니다.', 0, -190, 10)

    # 지정된 좌표에 도시이름과 구매금액을 출력
    for i in range(0, 4):
        for j in range(0, 8):
            write_letter(city[i*8+j][0], city[i*8+j][1], city[i*8+j][2], 10) # 도시이름 출력
            if j != 0 : # 모서리가 아닌 경우
                write_letter(str(city[i*8+j][3])+'만원', city[i*8+j][1], city[i*8+j][2]-20, 8) # 구매금액 출력

    write_letter(' Start!! --->', -400,-480, 12)
   

#출력할 문자, 출력할 x, y 좌표, 글씨 크기를 넘겨받아 화면에 출력하는 함수
def write_letter(letters, x, y, fontsize):
    t.up()
    t.goto(x, y)
    t.down()
    t.write(letters, False, align='center', font =  ('맑은 고딕', fontsize))

#주사위를 굴릴 player의 이름을 입력받아 주사위 2개를 굴리는 함수
def dice(player):
    # 1~6의 난수로 주사위 두 개의 값을 저장
    d1 = random.randint(1, 6)
    d2 = random.randint(1, 6)
    print('--------------------------------------')
    print(' >>',player, '님의 주사위 숫자는', d1,',', d2, '입니다.')
    return d1, d2

#현재 위치의 도시를 체크하는 함수, 이 도시에 위치한 player, 상대방, 현재 도시의 위치(도시 index)를 입력받음
def checkCity(player, op, cityNum):
    
    if cityNum % 8 == 0: # 현재 위치한 도시가 모서리인 경우
        if cityNum // 8 == 1 : # 무인도
            player.isIsland = 3 # 무인도에 방문하여 3턴 동안 머물러야 하므로 남은 턴 수 3을 저장
            print(player.name,'님은 무인도에 갇혔습니다! 3턴 동안 무인도에 머무릅니다.')
            print('주사위 2개가 같은 값이 나오면 탈출할 수 있습니다!')
            
        elif cityNum // 8 == 2: # 사회복지기구 
            print(player.name,'님은 사회복지기구에 도착했습니다! 사회복지기금 2만원을 지불해야 합니다.')
            player.isContribution = True # 사회복지기구를 방문했으므로 해당 변수를 True로 설정

        elif cityNum // 8 == 3: # 우주여행
            print(player.name,'님은 우주여행의 기회를 얻었습니다!')
            player.isUniverse = True # 우주여행을 방문했으므로 해당 변수를 True로 설정
        return;

    
    if op.hasCity(city[cityNum][0]): # 현재 위치한 도시가 상대방의 도시인 경우
        print(op.name,'님의 도시에 방문하였으므로 통행료', city[cityNum][4], '만원을 지불해야 합니다.')
        res = player.payCity(city[cityNum][4]) # 통행료를 지불
        
        if res == 0: # 파산을 한 경우
            print(player.name, '님의 파산으로 게임이 종료되었습니다.')
            print('***',op.name,'님의 승리!!!***')
            sys.exit(1) # 프로그램 종료
            
        elif res == 1: # 매각을 한 경우
            print(player.name, '님이 도시를 매각하여', op.name,'님에게 통행료를 지불하였습니다. 남은 돈 :', player.money, '만원')
            op.money += city[cityNum][4] # 지불을 완료하였으므로 상대방 돈에 통행료를 더해줌
            
        elif res == 2: # 정상적으로 지불한 경우
            print(player.name, '님이' , op.name,'님에게 통행료를 지불하였습니다. 남은 돈 :', player.money, '만원')
            op.money += city[cityNum][4] # 지불을 완료하였으므로 상대방 돈에 통행료를 더해줌

    elif player.hasCity(city[cityNum][0]) == False: # 현재 위치한 도시가 내가 가진 도시가 아닌 경우
        ans = input(str(player.name)+'님, 이 도시를 구입하시겠습니까?(y/n) 현재 돈 : ' + str(player.money) + ' 만원 ')

        while not(ans == 'y' or ans == 'n'): # 입력이 잘못된 경우 다시 입력받음           
            ans = input('잘못 입력하셨습니다. 다시 입력해주세요. ') 
        
        if ans == 'y' : # 도시를 구입하겠다고 한 경우
            res = player.buyCity(city[cityNum][0], city[cityNum][3]) # 도시 구입

def checkStatus(player, op):
    if player.isContribution: # 사회복지기구에 방문한 상태일 때
        res = player.payContribution() # 사회복지기금 지불
        
        if res == 0: # 파산을 한 경우
            print(player.name, '님의 파산으로 게임이 종료되었습니다.')
            print('***',op.name,'님의 승리!!!***')
            sys.exit(1) # 프로그램 종료
            
        elif res == 1: # 매각을 한 경우
            print(player.name, '님이 도시를 매각하여 사회복지기금을 지불하였습니다. 남은 돈 :', player.money, '만원')
        
        elif res == 2: # 정상적으로 지불한 경우
            print(player.name, '님이 사회복지기금을 지불하였습니다. 남은 돈 :', player.money, '만원')            
        
        player.isContribution = False # 지불을 완료하였으므로  해당 변수를 다시 False로 설정
        
    elif player.isUniverse: # 우주여행
        c = input('가고 싶은 도시를 입력하세요. ') # 우주여행을 제외한 맵 내의 어떤 도시든 갈 수 있음

        hasCity = False
        for i in range(0, len(city)): # 맵에 있는 도시를 입력했는지 체크, 맵에 있는 도시 이름이면 hasCity = true 아니면 false
            if city[i][0] == c :
                hasCity = True
                break;
        
        while True: # 잘못 입력했을 경우 다시 입력받음
            if hasCity : # 맵에 있는 도시를 입력한 경우
                if c != '우주여행' : # 입력한 도시가 우주여행이 아닌 경우
                    break; # 루프 종료
            
            if c == '우주여행': # 우주여행을 입력한 경우
                print('우주여행으로는 갈 수 없습니다. 다시 입력해주세요. ')
                hasCity = False
                
            else :
                print('잘못 입력하셨습니다. 다시 입력해주세요. ')
            
            c = input('가고 싶은 도시를 입력하세요. ')
            for i in range(0, len(city)):
                if city[i][0] == c :
                    hasCity = True
                    break;     
            
        dist = 0 # 우주여행으로부터 가고 싶은 도시까지 얼마나 이동해야하는지를 저장하는 변수

        for i in range(0, len(city)): 
            if city[i][0] == c :
                dist = i - player.pos # 해당 도시의 인덱스에서 사용자가 현재 위치한 도시의 인덱스(우주여행, 24)를 빼줌
                break;   
                    
        if dist > 0: # 거리가 양수인 경우
            player.go(dist) # 해당 거리만큼 이동
            
        else: # 거리가 음수인 경우
            player.go(dist+32) # 32만큼 더해준 거리만큼 이동

        player.isUniverse = False # 이동을 완료하였으므로 해당 변수를 False로 설정
        checkCity(player, op, player.pos) # 이동한 도시 체크
        


t = turtle.Turtle()
t.speed(0)
t.hideturtle()
screen = t.getscreen()
screen.screensize(2000,2000) # 터틀 창 크기 설정
map() # 맵 그리기
t.up()
p1_name = screen.textinput('Player1', 'Player1의 이름을 입력하세요.') # Player1 이름 입력받기
p2_name = screen.textinput('Player2', 'Player2의 이름을 입력하세요.') # Player2 이름 입력받기

p1 = Player(p1_name, 'red', 'pink', -380, t) # Player1 객체 생성, 이름, 터틀 색, 가지고 있는 도시를 표시하는 색, 처음 시작 위치, turtle
p2 = Player(p2_name, 'blue', 'skyblue', -440, t) # Player2 객체 생성, 이름, 터틀 색, 가지고 있는 도시를 표시하는 색, 처음 시작 위치, turtle

print('**************************************')
print('터틀 부루마블에 오신 것을 환영합니다!')
print(p1.name, '님은 빨강,',p2.name,'님은 파랑 입니다.')
print('**************************************\n')

p1.t.fd(80)
p2.t.fd(80)

while True :
    # Player1 차례
    if p1.isIsland != 0: # Player1 이 무인도에 있는 경우(무인도에 있어서 턴 수가 있는 경우)
        d1, d2 = dice(p1.name) # 주사위를 굴림
        
        if d1 == d2: # 주사위 더블, 무인도 탈출
            p1.isIsland = 0  # 탈출하므로 남아있는 턴 수를 0으로 초기화
            print('무인도 탈출에 성공하였습니다!')
            print(p1.name, '님,', d1+d2,'만큼 전진합니다!') 
            p1.go(d1+d2) # 해당 주사위 눈 수 만큼 전진
            checkCity(p1, p2, p1.pos) # 이동한 위치의 도시 체크
            checkStatus(p1, p2) # 플레이어의 현재 상태 체크(무인도, 사회복지기구, 우주여행)
            
        else : # 무인도 탈출 실패
            p1.isIsland -= 1 # 남아있는 턴수 -1
            print(p1.name,'님은 무인도 탈출에 실패하였습니다! 남은 턴 수:', p1.isIsland)

    else : # 무인도에 있지 않은 경우
        d1, d2 = dice(p1.name) # 주사위를 굴림
        print(p1.name, '님,', d1+d2,'만큼 전진합니다!')
        p1.go(d1+d2)   # 해당 주사위 눈 수 만큼 전진      
        checkCity(p1, p2, p1.pos) # 이동한 위치의 도시 체크
        checkStatus(p1, p2) # 플레이어의 현재 상태 체크(무인도, 사회복지기구, 우주여행)



    # Player2 차례
    if p2.isIsland != 0: # Player2 가 무인도에 있는 경우(무인도에 있어서 턴 수가 있는 경우)
        d1, d2 = dice(p2.name) # 주사위를 굴림
        
        if d1 == d2: # 주사위 더블, 무인도 탈출
            p2.isIsland = 0  # 탈출하므로 남아있는 턴 수를 0으로 초기화
            print('무인도 탈출에 성공하였습니다!')
            print(p2.name, '님,', d1+d2,'만큼 전진합니다!')
            p2.go(d1+d2)  # 해당 주사위 눈 수 만큼 전진          
            checkCity(p2, p1, p2.pos)  # 이동한 위치의 도시 체크
            checkStatus(p2, p1) # 플레이어의 현재 상태 체크(무인도, 사회복지기구, 우주여행)
            
        else : # 무인도 탈출 실패
            p2.isIsland -= 1 # 남아있는 턴수 -1
            print(p2.name,'님은 무인도 탈출에 실패하였습니다! 남은 턴 수:', p2.isIsland)

    else :  # 무인도에 있지 않은 경우
        d1, d2 = dice(p2.name) # 주사위를 굴림
        print(p2.name, '님,', d1+d2,'만큼 전진합니다!')
        p2.go(d1+d2) # 해당 주사위 눈 수 만큼 전진  
        checkCity(p2, p1, p2.pos) # 이동한 위치의 도시 체크
        checkStatus(p2, p1) # 플레이어의 현재 상태 체크(무인도, 사회복지기구, 우주여행)


